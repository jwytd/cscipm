<?xml version="1.0" encoding="UTF-8"?>
<!-- status log4j本身的日志级别 -->
<!-- monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.含义是每隔多少秒重新读取配置文件，可以不重启应用的情况下修改配置 -->
<!-- 有两个子节点:Appenders和Loggers -->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<Configuration status="WARN">
    <properties>
        <property name="LOG_HOME">/Users/wudan/myWorkSpace/</property>
        <property name="FILE_NAME">mylog</property>
        <property name="log.sql.level">info</property>
    </properties>
    <!-- log4j2支持的输出源有很多，有控制台Console、文件File、RollingRandomAccessFile、MongoDB、Flume 等 -->
    <Appenders>
        <!-- Console：控制台输出源是将日志打印到控制台上，开发的时候一般都会配置，以便调试-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- PatternLayout：控制台或文件输出源（Console、File、RollingRandomAccessFile）都必须包含一个PatternLayout节点，用于指定输出文件的格式（如 日志输出的时间 文件 方法 行数 等格式）-->
            <!-- %d{HH:mm:ss.SSS} 表示输出到毫秒的时间
                %t 输出当前线程名称
                %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0
                %logger 输出logger名称，因为Root Logger没有名称，所以没有输出
                %msg 日志文本
                %n 换行
                其他常用的占位符有：
                %F 输出所在的类文件名，如Log4j2Test.java
                %L 输出行号
                %M 输出所在方法名
                %l 输出语句所在的行数, 包括类名、方法名、文件名、行数 -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

<!--        <File></File>-->
        <!-- RollingRandomAccessFile: 该输出源也是写入到文件，不同的是比File更加强大，可以指定当文件达到一定大小（如20MB）时，另起一个文件继续写入日志，另起一个文件就涉及到新文件的名字命名规则，因此需要配置文件命名规则
            这种方式更加实用，因为你不可能一直往一个文件中写，如果一直写，文件过大，打开就会卡死，也不便于查找日志。
            fileName 指定当前日志文件的位置和文件名称
            filePattern 指定当发生Rolling时，文件的转移和重命名规则
            SizeBasedTriggeringPolicy 指定当文件体积大于size指定的值时，触发Rolling
            DefaultRolloverStrategy 指定最多保存的文件个数
            TimeBasedTriggeringPolicy 这个配置需要和filePattern结合使用，注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟
            TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件 -->
        <RollingRandomAccessFile name="RollingRandomAccessFile" fileName="${LOG_HOME}/${FILE_NAME}.log" filePattern="${LOG_HOME}/$${date:yyyy-MM}/${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %l - %msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingRandomAccessFile>
        <!-- NoSql：MongoDb, 输出到MongDb数据库中 -->
<!--        <NoSql></NoSql>-->
        <!-- Flume：输出到Apache Flume（Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。）-->
        <!-- Async：异步，需要通过AppenderRef来指定要对哪种输出源进行异步（一般用于配置RollingRandomAccessFile） -->
    </Appenders>
    <!-- Loggers：日志器
        日志器分根日志器Root和自定义日志器，当根据日志名字获取不到指定的日志器时就使用Root作为默认的日志器，自定义时需要指定每个Logger的名称name（对于命名可以以包名作为日志的名字，不同的包配置不同的级别等），日志级别level，相加性additivity（是否继承下面配置的日志器）， 对于一般的日志器（如Console、File、RollingRandomAccessFile）一般需要配置一个或多个输出源AppenderRef；
        每个logger可以指定一个level（TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF），不指定时level默认为ERROR
        additivity指定是否同时输出log到父类的appender，缺省为true。 -->
    <Loggers>
        <Root level="error">
            <AppenderRef ref="Console"/>
        </Root>
        <Logger name="com.wd.util" level="error">
<!--            <AppenderRef ref="RollingRandomAccessFile"/>-->
        </Logger>
        <Logger name="org.mybatis" level="INFO">

        </Logger>
    </Loggers>
</Configuration>